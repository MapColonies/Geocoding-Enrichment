name: pull_request

on: [pull_request, workflow_dispatch]

jobs:
  eslint:
    name: Run eslint
    runs-on: ubuntu-latest

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Run linters
        uses: wearerequired/lint-action@v1
        with:
          github_token: ${{ secrets.github_token }}
          # Enable linters
          eslint: true
          prettier: true
          eslint_extensions: ts

      - name: OpenAPI Lint Checks
        uses: nwestfall/openapi-action@v1.0.2
        with:
         github_token: ${{ secrets.GITHUB_TOKEN }}
         file: ./openapi3.yaml
         
      - name: Run Kafka KRaft Broker
        uses: spicyparrot/kafka-kraft-action@v1.1.0
        with:
          kafka-version: "3.7.0"
          kafka-topics: "topic"
  
  integration-test:
      name: Run Integration Tests
      runs-on: ubuntu-latest
      container: node:16

      services:
        # Label used to access the service container
        elasticsearch:
          # Docker Hub image
          image: elasticsearch:8.15.3
          env:
            discovery.type: single-node
            xpack.security.enabled: false
            xpack.security.enrollment.enabled: false
            ES_JAVA_OPTS: "-Xms512m -Xmx512m"
          ports:
            - 9200:9200
          # Set health checks to wait until elastic has started
          options: >-
            --health-cmd "curl -f http://localhost:9200/_cluster/health || exit 1"
            --health-interval 10s
            --health-timeout 10s
            --health-retries 30

        # zookeeper:
        #   image: bitnami/zookeeper:3.8.0
        #   ports:
        #     - 2181:2181
        #   env:
        #     ALLOW_ANONYMOUS_LOGIN: yes

        # kafka:
        #   image: bitnami/kafka:3.8.0
        #   ports:
        #     - 9092:9092
        #   env:
        #     KAFKA_BROKER_ID: 1
        #     KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
        #     KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
        #     ALLOW_PLAINTEXT_LISTENER: yes
        #   options: >-
        #     --health-cmd "kafka-topics.sh --bootstrap-server localhost:9092 --list || exit 1"
        #     --health-interval 10s
        #     --health-timeout 5s
        #     --health-retries 5
            
      strategy:
        matrix:
          node: [18.x, 20.x]

      steps:
        - name: Check out Git repository
          uses: actions/checkout@v2

        - name: Set up Node.js
          uses: actions/setup-node@v1
          with:
            node-version: ${{ matrix.node }}

        - name: Install Node.js dependencies
          run: npm ci

        - name: Install Docker
          run: |
            apt-get update
            apt-get install -y docker.io
        
        - name: Install Kafka on Docker
          run: |
            docker run -d --name kafka -p 9092:9092 apache/kafka:3.8.0

        - name: Wait for Kafka
          run: |
            until docker exec $(docker ps -qf "name=kafka") kafka-topics.sh --list --bootstrap-server localhost:9092; do
              echo "Waiting for Kafka to be ready...";
              sleep 5;
            done
                  
        - name: Create Kafka topic1
          run: |
            docker exec $(docker ps -qf "name=kafka") \
            kafka-topics.sh --create --topic topic1-test --bootstrap-server localhost:9092

        - name: Create Kafka topic2
          run: |
            docker exec $(docker ps -qf "name=kafka") \
            kafka-topics.sh --create --topic topic2-test --bootstrap-server localhost:9092


        - name: Wait for Elasticsearch
          run: |
            until curl -s http://elasticsearch:9200/_cluster/health | grep -E '"status":"(yellow|green)"'; do
              echo "Waiting for Elasticsearch...";
              sleep 5;
            done

        - name: Run integration tests
          run: npm run test:integration
          env:
            KAFKA_BROKERS: ${{ env.kafka_runner_address }}:9092

        - uses: actions/upload-artifact@v4
          with:
            name: Integration Test Reporters (Node ${{ matrix.node }})
            path: reports/**
          
  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  build_image:
    name: Build Image
    runs-on: ubuntu-latest

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v2

      - name: build Docker image
        run: docker build -t test-build:latest .
